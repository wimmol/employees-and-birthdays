{"version":3,"sources":["Components/EmployeeWithRadio.js","Components/SelectBoard.js","Components/BirthdayList.js","App.js","reportWebVitals.js","index.js"],"names":["EmployeeWithRadio","condition","employee","toChangeRadio","useState","isActive","setIsActive","toChange小ondition","className","firstName","lastName","type","value","checked","onChange","id","SelectBoard","actives","setActives","employees","setEmployees","loading","setLoading","error","setError","find","e","useEffect","fetch","then","response","ok","console","log","json","sort","a","b","catch","finally","filter","removeActive","addActive","alphabet","toUpperCase","split","map","latter","currentEmployees","length","BirthdayList","months","list","month","index","Number","parseInt","dob","day","year","array","getRandomColor","which","Math","floor","random","toString","style","backgroundColor","App","storedActives","JSON","parse","window","localStorage","getItem","setItem","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.681e80e6.chunk.js","sourcesContent":["import {useState} from \"react\";\n\nfunction EmployeeWithRadio({condition, employee, toChangeRadio}) {\n    const [isActive, setIsActive] = useState(condition)\n    function toChange小ondition(employee) {\n        toChangeRadio(employee)\n        setIsActive(!isActive)\n    }\n    //console.log(condition)\n    return (\n        <div className={\"employee\" + (isActive ? \" active\" : \"\")} key={employee.id}>\n            <p className=\"employee__name\">{employee.firstName + ' ' + employee.lastName}</p>\n            <form className=\"employee__form\">\n                <label className=\"label-na\">\n                    <input type=\"radio\"\n                           value=\"false\"\n                           checked={!isActive}\n                           onChange={() => toChange小ondition(employee)}\n                    />\n                    not active\n                </label>\n                <label  className=\"label-a\">\n                    <input type=\"radio\"\n                           value=\"true\"\n                           checked={isActive}\n                           onChange={() => toChange小ondition(employee)}\n                    />\n                    active\n                </label>\n            </form>\n        </div>\n    )\n}\n\nexport default EmployeeWithRadio;","import './SelectBoard.css'\nimport {useEffect, useState} from \"react\";\nimport EmployeeWithRadio from \"./EmployeeWithRadio\";\n\nfunction SelectBoard({actives, setActives}) {\n    const [employees, setEmployees] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState(false)\n\n    function addActive(employee) {\n        setActives([...actives, employee])\n    }\n    function removeActive(employee) {\n        setActives(actives.filter(e => e.id !== employee.id))\n    }\n    function isActive(employee) {\n        return actives.find(e => e.id === employee.id) ? 1 : 0\n    }\n\n    useEffect(() => {\n        fetch('https://yalantis-react-school-api.yalantis.com/api/task0/users')\n            .then(response => {\n                if (response.ok) {\n                    console.log('response ok')\n                    return response.json()\n                } else {\n                    throw response\n                }\n            })\n            .then(response => {\n                setEmployees(response.sort((a, b) => a.firstName > b.firstName ? 1 : -1))\n            })\n            .catch(error => {\n                console.log('Error fetching:', error)\n                setError(error)\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }, [])\n\n    if (loading)\n        return (\n            <div className=\"select-board\">\n                <p>Loading...</p>\n            </div>\n        )\n    if (error)\n        return (\n            <div className=\"select-board\">\n                <p>Error fetching</p>\n                <p>{error}</p>\n            </div>\n        )\n\n    function toChangeRadio(employee) {\n        if (isActive(employee)) {\n            removeActive(employee)\n        } else {\n            addActive(employee)\n        }\n    }\n\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz'.toUpperCase().split('')\n\n    return (\n        <div className=\"select-board\">\n            <h2>Employees</h2>\n            <div className=\"select-board__latter-list\">\n                {alphabet.map(latter => {\n                    let currentEmployees = employees.filter(employee => employee.firstName[0].toUpperCase() === latter)\n                    if (currentEmployees.length === 0) {\n                        return (\n                            <div className=\"select-board__latter\" key={latter}>\n                                <p className=\"select-board__latter-symbol\">{latter}</p>\n                                <p className=\"employee-name\">No Employees</p>\n                            </div>)\n                    }\n                    return (<div className=\"select-board__latter\" key={latter}>\n                        <p className=\"select-board__latter-symbol\">{latter}</p>\n                        {currentEmployees.map(employee => <EmployeeWithRadio\n                            key={employee.id}\n                            condition={isActive(employee)}\n                            employee={employee}\n                            toChangeRadio={toChangeRadio}\n                        />)}\n                    </div>)\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default SelectBoard\n","import './BirthdayList.css'\n\nfunction BirthdayList({actives}) {\n    if (actives.length === 0)\n        return (<div className=\"birthday-list\"><h3>Employees List is empty</h3></div>)\n    let months = 'November December January February March April May June July August September October'.split(' ')\n    actives = actives.sort((a, b) => a.lastName > b.lastName ? 1 : -1)\n    let list = months.map((month, index) =>\n        actives\n            .filter(employee => {\n                let monthNum = (Number.parseInt(employee.dob.split('-')[1]) + 1) % 12\n                return monthNum === index ? 1 : 0\n            })\n            .map(employee => {\n                let day = Number.parseInt(employee.dob.split('-')[2])\n                let year = Number.parseInt(employee.dob.split('-')[0])\n                return (\n                        <p key={employee.id} className=\"birthday-list__employee\">\n                            <span className=\"employee__name\">{employee.firstName + ' ' + employee.lastName}</span>\n                            {' - ' + day + ' ' + month + ', ' + year + ' year'}\n                        </p>\n                )\n            }))\n        .map(array => {\n            if (array.length === 0) {\n                return <p className=\"employee-name\">No Employees</p>\n            } else {\n                return array\n            }\n        })\n\n    function getRandomColor() {\n        let which = Math.floor(Math.random() * 3)\n        let a = [Math.floor(Math.random() * 30) + 220, Math.floor(Math.random() * 30) + 220, 255]\n        return '#' + a[which % 3].toString(16) + a[(which+1) % 3].toString(16) + a[(which+2) % 3].toString(16)\n    }\n\n\n    return (\n        <div className=\"birthday-list\">\n            <h2>Birthdays</h2>\n            <div className=\"birthday-list__months-list\">\n                {months.map((month, index) =>\n                    <div key={month} className=\"birthday-list__month\" style={{backgroundColor: getRandomColor()}}>\n                        <p className=\"birthday-list__month-name\">{month}</p>\n                        {list[index]}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default BirthdayList;\n","import SelectBoard from \"./Components/SelectBoard\";\nimport BirthdayList from \"./Components/BirthdayList\";\n\nimport './App.css';\nimport {useEffect, useState} from \"react\";\n\nfunction App() {\n    const [actives, setActives] = useState([])\n\n    useEffect(() => {\n        let storedActives = JSON.parse(window.localStorage.getItem('actives'))\n        if (storedActives === null) storedActives = []\n        setActives(storedActives)\n    }, []);\n\n    useEffect(() => {\n        window.localStorage.setItem('actives', JSON.stringify(actives));\n    }, [actives]);\n\n    return (\n        <div className=\"wrapper\">\n            <SelectBoard actives={actives} setActives={setActives} />\n            <BirthdayList actives={actives} />\n        </div>\n\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}